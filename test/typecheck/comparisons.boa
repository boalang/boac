o: output sum of int;

# allow comparisons on proto types
st1: Statement;
st2: Statement;
f0 := function() : Statement {
    st3: Statement;
    return st3;
};

if (st1 == st2 || st1 != st2)
    o << 1;
if (f0() == st2 || st1 != f0() || f0() == f0())
    o << 1;

# allow comparisons on proto maps
k := StatementKind.EXPRESSION;
k2 := StatementKind.EXPRESSION;
f1 := function() : StatementKind {
    return StatementKind.EXPRESSION;
};

if (k == k2 || k != k2)
    o << 1;
if (f1() == k2 || k != f1() || f1() == f1())
    o << 1;

# allow comparisons on proto lists
p := input.abstract;
p2 := input.abstract;
#f2 := function() : array of string {
#    return input.databases;
#};

if (p == p2 || p != p2)
    o << 1;
#if (f2() == p2 || p != f2() || f2() == f2())
#    o << 1;

# allow comparisons on arrays
a: array of int = {1, 2};
a2: array of int = {1, 2};
f3 := function() : array of int {
    return {1, 2};
};

if (a == a2 || a != a2)
    o << 1;
if (f3() == a2 || a != f3() || f3() == f3())
    o << 1;

# allow comparisons on sets
s: set of int;
add(s, 1);
add(s, 2);
f4 := function() : set of int {
    return s;
};

if (s == s || s != s)
    o << 1;
if (f4() == s || s != f4() || f4() == f4())
    o << 1;

# allow comparisons on maps
m: map[string] of int = { "one" : 1 };
f5 := function() : map[string] of int {
    return m;
};

if (m == m || m != m)
    o << 1;
if (f5() == m || m != f5() || f5() == f5())
    o << 1;

# allow comparisons on stacks
st: stack of int;
push(st, 1);
f6 := function() : stack of int {
    return st;
};

if (st == st || st != st)
    o << 1;
if (f6() == st || st != f6() || f6() == f6())
    o << 1;
