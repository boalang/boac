syntax = "proto2";
package boa.types;

import "shared.proto";
import "code.proto";
import "issues.proto";

option optimize_for = SPEED;

/** Top-level type, represents a single project on the forge */
message Project {
	/** Unique identifier for the project */
	optional string id = 1;
	/** The name of the project */
	optional string name = 2;
	/** A URL to the project's page on the forge */
	optional string project_url = 3;
	/** A URL to the project's homepage */
	optional string homepage_url = 4;
	/** The time the project was created */
	optional uint64 created_date = 5;
	/** A description of the project */
	optional string description = 6;
	/** A list of all OSes supported by the project */
	repeated string operating_systems = 7;
	/** A list of all programming languages used by the project */
	repeated string programming_languages = 8;
	/** A list of all databases used by the project */
	repeated string databases = 9;
	/** A list of all licenses used by the project */
	repeated string licenses = 10;
	/** A list of all interfaces supported by the project */
	repeated string interfaces = 11;
	/** A list of the target audiences for the project */
	repeated string audiences = 12;
	/** A list of self-categorized topics the project belongs to */
	repeated string topics = 13;
	/** @exclude TODO */
	repeated string status = 14;
	/** @exclude TODO */
	repeated string translations = 15;
	/** If true, this project explicitly states it accepts donations */
	optional bool donations = 16;
	/** A list of all people currently maintaining the project */
	repeated Person maintainers = 17;
	/** A list of all software developers currently on the project */
	repeated Person developers = 18;
	/** A list of all code repositories associated with this project */
	repeated CodeRepository code_repositories = 19;
	/** @exclude A list of all issue repositories associated with this project */
	repeated IssueRepository issue_repositories = 20;
	/** Describes the kind of forge */
	enum ForgeKind {
		option allow_alias = true;
		/** Any other kind of forge */
		OTHER = 0;
		/** SourceForge.net */
		SOURCEFORGE = 1;
		/** @exclude */
		SF = 1;
		/** GitHub.com */
		GITHUB = 2;
		/** @exclude */
		GH = 2;
		/** Apache */
		APACHE = 3;
		/** Qualitas Corpus */
		QUALITAS = 4;
	}
	/** @exclude The kind of forge this project resides in */
	required ForgeKind kind = 21;
	/** Specify if this repository is forked from some other repo */
	optional bool forked = 22;
	/** The number of times this repository has been forked */
	optional int32 forks = 23;
	/** The number of times this repository has been starred */
	optional int32 stars = 24;
	/** The number of bytes of code for each language **/
	repeated int32 programming_languages_locs = 25;
	/** The size of the repository in bytes of code **/
	optional int32 size = 26;
	optional string main_language = 27;
	
	optional bool noast = 28;
	optional string owner_type = 29;
	optional string default_branch = 30;
	
	optional Paper paper = 31;
	
}

message Paper {

	required string id = 1;
	optional Metadata metadata = 2;
	repeated Paragraph abstract = 3;
	repeated Section body_text = 4;
	repeated Reference bib_entries = 5;
	repeated Reference ref_entries = 6;

}


message Metadata {

	optional string title = 1;
	repeated Author authors = 2;

}

message Author {

	optional string first = 1;
	optional string middle = 2;
	optional string last = 3;
	optional string suffix = 4;
	repeated Affiliation affiliation = 5;
	optional string email = 6;

}

message Affiliation {

	optional string laboratory = 1;
	optional string institution = 2;
	optional Location location = 3;

}

message Section {

	optional string title = 1;
	repeated Section subsections = 2;
	repeated Paragraph body = 3;

}

message Paragraph {

	enum ParagraphKind {
		option allow_alias = true;
		BACKGROUND = 0;
		METHODS = 1;
		RESULTS = 2;
		CONCLUSIONS = 3;
		OTHER = 4;
	}

	required string text = 1;
	repeated Citation cite_spans = 2;
	repeated Citation ref_spans = 3;
	optional ParagraphKind kind = 4;

}

message Citation {

	optional string text = 1;
	optional string ref_id = 2;

}

message Location {

	optional string addrLine = 1;
	optional string postCode = 2;
	optional string settlement = 3;
	optional string country = 4;

}

message Reference {

	enum ReferenceType {
		option allow_alias = true;
		FIGURE = 0;
		TABLE = 1;
		BIB = 2;
	}

	required string ref_id = 1;
	optional string title = 2;
	optional string text = 3;
	repeated Author authors = 4;
	optional int32 year = 5;
	optional string venue = 6;
	optional string volume = 7;
	optional string issn = 8;
	optional string pages = 9;
	optional ReferenceType type = 10;

}